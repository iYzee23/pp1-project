package rs.ac.bg.etf.pp1;

import java.util.Collection;

import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Scope;
import rs.etf.pp1.symboltable.concepts.Struct;

public class Tabb extends Tab {
	
	public static final Struct boolType = new Struct(Struct.Bool);
	public static Scope programScope = null;
	
	public static void init() {
		Tab.init();
		Tab.insert(Obj.Type, "bool", boolType);
	}
	
	public static Obj findLocal(String name) {
		Obj res = Tab.currentScope().findSymbol(name);
		if (res == null) res = Tab.noObj;
		return res;
	}
	
	public static Obj insertStatic(int kind, String name, Struct type) {
		Obj newObj = new Obj(kind, name, type, 0, 0); 
		if (!programScope.addToLocals(newObj)) {
			Obj res = programScope.findSymbol(name);
			return (res != null) ? res : noObj;
		}
		return newObj;
	}
	
	public static Obj findStatic(String name, Struct searchType) {
		Obj resObj = Tabb.noObj;
		int minDistance = 9999;
		
		if (programScope.getLocals() != null) {
			Collection<Obj> objs = programScope.values();
			for (Obj elem: objs) {
				if (elem.getKind() == Objj.Stat && elem.getName().endsWith(name)) {
					int lastIndexOf = elem.getName().lastIndexOf("::");
					String goalPart = elem.getName().substring(0, lastIndexOf);
					Struct goalType = Tabb.programScope.findSymbol(goalPart).getType();
					Struct currentType = searchType;
			        int currDistance = 0;
			        
			        while (currentType != null) {
			            if (currentType.equals(goalType) && currDistance < minDistance) {
			                minDistance = currDistance;
			                resObj = elem;
			                break;
			            } 
			            ++currDistance;
			            currentType = currentType.getElemType();
			        }
				}
				if (minDistance == 0) break;
			}
		}
		return resObj;
	}
	
	public static Obj getFormalParam(Obj meth, int index) {
		Collection<Obj> localList = meth.getLocalSymbols(); 
		for (Obj elem: localList) {
			if (elem.getAdr() == index)
				return elem;
		}
		return Tabb.noObj;
	}
	
	public static void copyFromSuperclass(Struct currClass, Struct superClass) {
		Collection<Obj> members = superClass.getMembers();
		for (Obj elem: members) {
			Obj newElem = Tabb.insert(elem.getKind(), elem.getName(), elem.getType());
			newElem.setAdr(elem.getAdr());
			newElem.setLevel(elem.getLevel());
			
			if (elem.getKind() == Obj.Meth) {
				Collection<Obj> methMembers = elem.getLocalSymbols();
				Tabb.openScope();
				for (Obj mElem: methMembers) {
					Tabb.insert(mElem.getKind(), mElem.getName(), mElem.getName().equals("this") ? currClass : superClass);
				}
				Tabb.chainLocalSymbols(newElem);
				Tabb.closeScope();
			}
		}
	}

}
