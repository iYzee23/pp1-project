package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing couldn't be continued", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, NAMESP, COMMA, CONST, SEMI, EQUAL, LBRACKET, RBRACKET, CLASS, EXTENDS;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;

nonterminal Program, NamespaceList, DeclList, MethodDeclList, Namespace, ConstDecl, VarDecl, ClassDecl, MethodDecl;
nonterminal ConstParts, ConstPart, Type, ConstChoice, VarParts, VarPart, BracketsOpt, ExtendsOpt, StatVarDeclList;
nonterminal StatInitList, VarDeclList, ClassMethodsOpt;

precedence left ELSE;

Program ::= (Program) PROG IDENT NamespaceList DeclList LBRACE MethodDeclList RBRACE;

NamespaceList ::= (NamespaceListYes) NamespaceList Namespace
			   |
			   (NamespaceListNo) /* epsilon */;

DeclList ::= (DeclListConst) DeclList ConstDecl
		  |
		  (DeclListVar) DeclList VarDecl
		  |
		  (DeclListClass) DeclList ClassDecl
		  |
		  (DeclListNo) /* epsilon */;

MethodDeclList ::= (MethodDeclListYes) MethodDeclList MethodDecl
				|
				(MethodDeclListNo) /* epsilon */;

Namespace ::= NAMESP IDENT LBRACE DeclList LBRACE MethodDeclList RBRACE RBRACE;

ConstDecl ::= (ConstDecl) ConstParts SEMI;

ConstParts ::= (ConstDeclList) ConstParts COMMA ConstPart
		    |
		    (ConstDeclSingle) CONST Type ConstPart;

ConstPart ::= (ConstPart) IDENT EQUAL ConstChoice;

ConstChoice ::= (ConstNum) NUM_CONST
			 |
			 (ConstChar) CHAR_CONST
			 |
			 (ConstBool) BOOL_CONST;

VarDecl ::= (VarDecl) VarParts SEMI;

VarParts ::= (VarDeclList) VarParts COMMA VarPart
		  |
		  (VarDeclSingle) Type VarPart;

VarPart ::= (VarPart) IDENT BracketsOpt;

BracketsOpt ::= (BracketsOptYes) LBRACKET RBRACKET
			 |
			 (BracketsOptNo) /* epsilon */;

ClassDecl ::= (ClassDecl) CLASS IDENT ExtendsOpt LBRACE StatVarDeclList StatInitList VarDeclList ClassMethodsOpt RBRACE;

ExtendsOpt ::= (ExtendsOptYes) EXTENDS Type
			|
			(ExtendsOptNo) /* epsilon */;

StatVarDeclList

StatInitList

VarDeclList

ClassMethodsOpt

MethodDecl






