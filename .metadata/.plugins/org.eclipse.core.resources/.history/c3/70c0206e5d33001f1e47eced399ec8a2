package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing couldn't be continued", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, NAMESP, COMMA, CONST, SEMI;
terminal String IDENT;
terminal Integer NUMBER;

nonterminal Program, NamespaceOpt, DeclOpt, MethodDeclOpt, Namespace, ConstDecl, VarDecl, ClassDecl, MethodDecl;
nonterminal ConstParts, ConstPart, Type;

precedence left ELSE;

Program ::= (Program) PROG IDENT NamespaceOpt DeclOpt LBRACE MethodDeclOpt RBRACE;

NamespaceOpt ::= (NamespaceOptYes) Namespace
			  |
			  (NamespaceOptNo) /* epsilon */;

DeclOpt ::= (DeclOptConst) ConstDecl
		 |
		 (DeclOptVar) VarDecl
		 |
		 (DeclOptClass) ClassDecl
		 |
		 (DeclOptNo) /* epsilon */;

MethodDeclOpt ::= (MethodDeclOptYes) MethodDecl
			   |
			   (MethodDeclOptNo) /* epsilon */; 

Namespace ::= (Namespace) NAMESP IDENT LBRACE DeclOpt LBRACE MethodDeclOpt RBRACE RBRACE;

ConstDecl ::= (ConstDecl) ConstParts SEMI;

ConstParts ::= (ConstDeclList) ConstParts COMMA ConstPart
		    |
		    (ConstDeclSingle) CONST Type ConstPart;






















