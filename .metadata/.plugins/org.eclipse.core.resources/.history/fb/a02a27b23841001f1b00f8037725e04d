package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.concepts.Obj;

public class CodeGenerator extends VisitorAdaptor {

	int mainPc;
	
	public int getMainPc() {
		return mainPc;
	}
	
	static final int NOT_USED = 0;
	static final int MUL = 1;
	static final int DIV = 2;
	static final int MOD = 3;
	static final int PLUS = 4;
	static final int MINUS = 5;
	static final int EQ = 6;
	static final int NE = 7;
	static final int GT = 8;
	static final int GE = 9;
	static final int LT = 10;
	static final int LE = 11;
	int mulopKind = NOT_USED;
	int addopKind = NOT_USED;
	int relopKind = NOT_USED;
	
	// MethodDecl
	
	public void visit(MethodNamet methodName) {
		Obj methObj = methodName.obj;
		
		methObj.setAdr(Codee.pc);
		if (methObj.getName().equals("main")) {
			Codee.mainPc = Codee.pc;
		}
		
		Codee.put(Codee.enter);
		Codee.put(methObj.getLevel());
		Codee.put(methObj.getLocalSymbols().size());
	}
	
	public void visit(MethodDeclYes methodDecl) {
		Codee.put(Codee.exit);
		Codee.put(Codee.return_);
	}
	
	public void visit(MethodDeclNo methodDecl) {
		Codee.put(Codee.exit);
		Codee.put(Codee.return_);
	}
	
	// Statement
	
	public void visit(StmtPrintYes stmt) {
		
	}
	
	public void visit(StmtPrintNo stmt) {
		
	}
	
	// DesignatorStatement
	
	// ActPars
	
	// Condition
	
	// CondTerm
	
	// CondFact
	
	// Expr
	
	public void visit(AddopTermListYes addopTerm) {
		
	}
	
	public void visit(ExprYes expr) {
		
	}
	
	public void visit(ExprNo expr) {
		
	}
	
	// Term
	
	public void visit(MulopFactorListYes mulopFactor) {
		
	}
	
	public void visit(Termt term) {
		
	}
	
	// Factor
	
	public void visit(FactorDesignatorFirst factor) {
		
	}
	
	public void visit(FactorDesignatorSecond factor) {
		
	}
	
	public void visit(FactorDesignatorThird factor) {
		
	}
	
	public void visit(FactorNum factor) {
		Code.loadConst(factor.getValue());
	}
	
	public void visit(FactorChar factor) {
		Code.loadConst(factor.getValue());
	}
	
	public void visit(FactorBool factor) {
		Code.loadConst(factor.getValue() ? 1 : 0);
	}
	
	public void visit(NewChoiceExpr choice) {
		
	}
	
	public void visit(NewChoiceActParsYes choice) {
		
	}
	
	public void visit(NewChoiceActParsNo choice) {
		
	}
	
	public void visit(FactorNew factor) {
		
	}
	
	public void visit(FactorExpr factor) {
		
	}
	
	// Designator
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	// Addop
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	// Mulop
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
	public void visit(RelopEqual relop) {
		
	}
	
}
