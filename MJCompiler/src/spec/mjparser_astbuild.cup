package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing couldn't be continued", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



/* Terminals */

terminal PROG, LBRACE, RBRACE, NAMESP, COMMA, CONST, SEMI, ASSIGN, LBRACKET, RBRACKET, CLASS, EXTENDS, STATIC, COLON;
terminal LPAREN, RPAREN, VOID, RESOLUTION, INC, DEC, EQUAL, NOT_EQUAL, GRT, GRT_EQUAL, LESS, LESS_EQUAL, PRINT, ARROW;
terminal PLUS, MINUS, MUL, DIV, MOD, DOT, OR, AND, NEW, RANGE, FOR, IN, IF, ELSE, BREAK, CONTINUE, RETURN, READ; 
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;



/* Non-terminals */

nonterminal Program Program;
nonterminal NamespaceList NamespaceList;
nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Namespace Namespace;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal MethodDecl MethodDecl;
nonterminal ConstParts ConstParts;
nonterminal ConstPart ConstPart;
nonterminal VarParts VarParts;
nonterminal VarPart VarPart;
nonterminal StatVarDeclList StatVarDeclList;
nonterminal ForSymbol ForSymbol;
nonterminal ExtClass ExtClass;
nonterminal StatInitList StatInitList;
nonterminal VarDeclList VarDeclList;
nonterminal StaticInitializer StaticInitializer;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal ReturnType ReturnType;
nonterminal FormPars FormPars;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal OpChoice OpChoice;
nonterminal DesignatorList DesignatorList;
nonterminal ElseOpt ElseOpt;
nonterminal StatInits StatInits;
nonterminal TLBracket TLBracket;
nonterminal TRBracket TRBracket;
nonterminal ActPars ActPars;
nonterminal ActParsTemp ActParsTemp;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal DesignatorParts DesignatorParts;
nonterminal BracketsOpt BracketsOpt;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal CondTermList CondTermList;
nonterminal CondFactList CondFactList;
nonterminal StatVarDeclInit StatVarDeclInit;
nonterminal TLParen TLParen;
nonterminal TRParen TRParen; 
nonterminal AddopTermList AddopTermList;
nonterminal MulopFactorList MulopFactorList;
nonterminal NewChoice NewChoice;
nonterminal DesignatorStmtList DesignatorStmtList;
nonterminal MethodDeclListOpt MethodDeclListOpt;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj NamespaceName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Label;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;



/* Precedences */

precedence left ELSE;



/* Grammar */

Program ::= (Programt) PROG ProgName:P1 NamespaceList:N2 DeclList:D3 LBRACE MethodDeclList:M4 RBRACE {: RESULT=new Programt(P1, N2, D3, M4); RESULT.setLine(P1left); :};

ProgName ::= (ProgNamet) IDENT:progName {: RESULT=new ProgNamet(progName); RESULT.setLine(progNameleft); :};

NamespaceList ::= (NamespaceListYes) NamespaceList:N1 Namespace:N2 {: RESULT=new NamespaceListYes(N1, N2); RESULT.setLine(N1left); :}
			   |
			   (NamespaceListNo) {: RESULT=new NamespaceListNo(); :} /* epsilon */;

DeclList ::= (DeclListConst) DeclList:D1 ConstDecl:C2 {: RESULT=new DeclListConst(D1, C2); RESULT.setLine(D1left); :}
		  |
		  (DeclListVar) DeclList:D1 VarDecl:V2 {: RESULT=new DeclListVar(D1, V2); RESULT.setLine(D1left); :}
		  |
		  (DeclListClass) DeclList:D1 ClassDecl:C2 {: RESULT=new DeclListClass(D1, C2); RESULT.setLine(D1left); :}
		  |
		  (DeclListNo) {: RESULT=new DeclListNo(); :} /* epsilon */;

MethodDeclList ::= (MethodDeclListYes) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListYes(M1, M2); RESULT.setLine(M1left); :}
				|
				(MethodDeclListNo) {: RESULT=new MethodDeclListNo(); :} /* epsilon */;

Namespace ::= (Namespacet) NAMESP NamespaceName:N1 LBRACE DeclList:D2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new Namespacet(N1, D2, M3); RESULT.setLine(N1left); :};

NamespaceName ::= (NamespaceNamet) IDENT:namespaceName {: RESULT=new NamespaceNamet(namespaceName); RESULT.setLine(namespaceNameleft); :};

ConstDecl ::= (ConstDeclt) ConstParts:C1 SEMI {: RESULT=new ConstDeclt(C1); RESULT.setLine(C1left); :};

ConstParts ::= (ConstDeclList) ConstParts:C1 COMMA ConstPart:C2 {: RESULT=new ConstDeclList(C1, C2); RESULT.setLine(C1left); :}
		    |
		    (ConstDeclSingle) CONST Type:T1 ConstPart:C2 {: RESULT=new ConstDeclSingle(T1, C2); RESULT.setLine(T1left); :};

ConstPart ::= (ConstPartNum) IDENT:constName ASSIGN NUM_CONST:constValue {: RESULT=new ConstPartNum(constName, constValue); RESULT.setLine(constNameleft); :}
		   |
		   (ConstPartChar) IDENT:constName ASSIGN CHAR_CONST:constValue {: RESULT=new ConstPartChar(constName, constValue); RESULT.setLine(constNameleft); :}
		   |
		   (ConstPartBool) IDENT:constName ASSIGN BOOL_CONST:constValue {: RESULT=new ConstPartBool(constName, constValue); RESULT.setLine(constNameleft); :};

VarDecl ::= (VarDeclt) VarParts:V1 SEMI {: RESULT=new VarDeclt(V1); RESULT.setLine(V1left); :}
		 |
		 (VarDecltError) error SEMI:l {: parser.report_error("Bad declaration of variable. Performed recovery until ; in line " + lleft, null); :} {: RESULT=new VarDecltError(); :};

VarParts ::= (VarDeclListParts) VarParts:V1 COMMA VarPart:V2 {: RESULT=new VarDeclListParts(V1, V2); RESULT.setLine(V1left); :}
		  |
		  (VarDeclListPartsError) error COMMA:l {: parser.report_error("Bad declaration of variable. Performed recovery until , in line " + lleft, null); :} VarPart:V1 {: RESULT=new VarDeclListPartsError(V1); RESULT.setLine(V1left); :}
		  |
		  (VarDeclSingle) Type:T1 VarPart:V2 {: RESULT=new VarDeclSingle(T1, V2); RESULT.setLine(T1left); :};

VarPart ::= (VarPartYes) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarPartYes(varName); RESULT.setLine(varNameleft); :}
		 |
		 (VarPartNo) IDENT:varName {: RESULT=new VarPartNo(varName); RESULT.setLine(varNameleft); :};

ClassDecl ::= (ClassDeclYes) CLASS ClassName:C1 ExtClass:E2 LBRACE StatVarDeclList:S3 StatInitList:S4 VarDeclList:V5 MethodDeclListOpt:M6 RBRACE {: RESULT=new ClassDeclYes(C1, E2, S3, S4, V5, M6); RESULT.setLine(C1left); :}
		   |
		   (ClassDeclYesError) CLASS ClassName:C1 EXTENDS error LBRACE:l {: parser.report_error("Bad class extension. Performed recovery until { in line " + lleft, null); :} StatVarDeclList:S2 StatInitList:S3 VarDeclList:V4 MethodDeclListOpt:M5 RBRACE {: RESULT=new ClassDeclYesError(C1, S2, S3, V4, M5); RESULT.setLine(C1left); :}
		   |
		   (ClassDeclNo) CLASS ClassName:C1 LBRACE StatVarDeclList:S2 StatInitList:S3 VarDeclList:V4 MethodDeclListOpt:M5 RBRACE {: RESULT=new ClassDeclNo(C1, S2, S3, V4, M5); RESULT.setLine(C1left); :};
		   
ExtClass ::= (ExtClasst) EXTENDS Type:T1 {: RESULT=new ExtClasst(T1); RESULT.setLine(T1left); :};
		   
ClassName ::= (ClassNamet) IDENT:className {: RESULT=new ClassNamet(className); RESULT.setLine(classNameleft); :};

MethodDeclListOpt ::= (MethListYes) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MethListYes(M1); RESULT.setLine(M1left); :}
				   |
				   (MathListError) error LBRACE:l {: parser.report_error("Bad variable declaration. Performed recovery until { in line " + lleft, null); :} MethodDeclList:M1 RBRACE {: RESULT=new MathListError(M1); RESULT.setLine(M1left); :}
				   |
				   (MethListNo) {: RESULT=new MethListNo(); :} /* epsilon */;

StatVarDeclList ::= (StatVarDeclListYes) StatVarDeclList:S1 StatVarDeclInit:S2 VarDecl:V3 {: RESULT=new StatVarDeclListYes(S1, S2, V3); RESULT.setLine(S1left); :}
				 |
				 (StatVarDeclListNo) {: RESULT=new StatVarDeclListNo(); :} /* epsilon */;
				 
StatVarDeclInit ::= (StatVarDeclInitt) STATIC {: RESULT=new StatVarDeclInitt(); :};

StatInitList ::= (StatInitListt) StatInits:S1 {: RESULT=new StatInitListt(S1); RESULT.setLine(S1left); :};
			  
StatInits ::= (StatInitsYes) StaticInitializer:S1 StatInits:S2 {: RESULT=new StatInitsYes(S1, S2); RESULT.setLine(S1left); :}
			  |
			  (StatInitsNo) {: RESULT=new StatInitsNo(); :} /* epsilon */;

VarDeclList ::= (VarDeclListYes) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListYes(V1, V2); RESULT.setLine(V1left); :}
			 |
			 (VarDeclListNo) {: RESULT=new VarDeclListNo(); :} /* epsilon */;

StaticInitializer ::= (StaticInitializert) STATIC LBRACE StatementList:S1 RBRACE {: RESULT=new StaticInitializert(S1); RESULT.setLine(S1left); :};

StatementList ::= (StatementListYes) StatementList:S1 Statement:S2 {: RESULT=new StatementListYes(S1, S2); RESULT.setLine(S1left); :}
			   |
			   (StatementListNo) {: RESULT=new StatementListNo(); :} /* epsilon */; 

MethodDecl ::= (MethodDeclYes) ReturnType:R1 MethodName:M2 LPAREN FormPars:F3 RPAREN VarDeclList:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDeclYes(R1, M2, F3, V4, S5); RESULT.setLine(R1left); :}
			|
			(MethodDeclYesError) ReturnType:R1 MethodName:M2 LPAREN error RPAREN:l {: parser.report_error("Bad formal parameters definition. Performed recovery until ) in line " + lleft, null); :} VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclYesError(R1, M2, V3, S4); RESULT.setLine(R1left); :}
			|
			(MethodDeclNo) ReturnType:R1 MethodName:M2 LPAREN RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclNo(R1, M2, V3, S4); RESULT.setLine(R1left); :};
			
MethodName ::= (MethodNamet) IDENT:methName {: RESULT=new MethodNamet(methName); RESULT.setLine(methNameleft); :};

ReturnType ::= (ReturnTypeType) Type:T1 {: RESULT=new ReturnTypeType(T1); RESULT.setLine(T1left); :}
			|
			(ReturnTypeVoid) VOID {: RESULT=new ReturnTypeVoid(); :};
			 
FormPars ::= (FormParsList) FormPars:F1 COMMA Type:T2 IDENT:paramName BracketsOpt:B3 {: RESULT=new FormParsList(F1, T2, paramName, B3); RESULT.setLine(F1left); :}
		  |
		  (FormParsListError) error COMMA:l {: parser.report_error("Bad formal parameters definition. Performed recovery until , in line " + lleft, null); :} Type:T1 IDENT:I2 BracketsOpt:B3 {: RESULT=new FormParsListError(T1, I2, B3); RESULT.setLine(T1left); :}
		  |
		  (FormParsSingleYes) Type:T1 IDENT:paramName LBRACKET RBRACKET {: RESULT=new FormParsSingleYes(T1, paramName); RESULT.setLine(T1left); :}
		  |
		  (FormParsSingleNo) Type:T1 IDENT:paramName {: RESULT=new FormParsSingleNo(T1, paramName); RESULT.setLine(T1left); :};

BracketsOpt ::= (BracketsOptYes) LBRACKET RBRACKET {: RESULT=new BracketsOptYes(); :}
			 |
			 (BracketsOptNo) {: RESULT=new BracketsOptNo(); :} /* epsilon */;

Type ::= (TypeYes) IDENT:namespaceName RESOLUTION IDENT:typeName {: RESULT=new TypeYes(namespaceName, typeName); RESULT.setLine(namespaceNameleft); :}
	  |
	  (TypeNo) IDENT:typeName {: RESULT=new TypeNo(typeName); RESULT.setLine(typeNameleft); :};

Statement ::= (StmtDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StmtDesignator(D1); RESULT.setLine(D1left); :}
		   |
		   (StmtDesignatorError) error SEMI:l {: parser.report_error("Bad designator statement. Performed recovery until ; in line " + lleft, null); :} {: RESULT=new StmtDesignatorError(); :}
		   |
		   (StmtIfElse) IF LPAREN Condition:C1 RPAREN Statement:S2 ElseOpt:E3 {: RESULT=new StmtIfElse(C1, S2, E3); RESULT.setLine(C1left); :}
		   |
		   (StmtIfElseError) IF LPAREN error RPAREN:l {: parser.report_error("Bad IF condition. Performed recovery until ) in line " + lleft, null); :} Statement:S1 ElseOpt:E2 {: RESULT=new StmtIfElseError(S1, E2); RESULT.setLine(S1left); :}
		   |
		   (StmtBreak) BREAK SEMI {: RESULT=new StmtBreak(); :}
		   |
		   (StmtContinue) CONTINUE SEMI {: RESULT=new StmtContinue(); :}
		   |
		   (StmtReturnYes) RETURN Expr:E1 SEMI {: RESULT=new StmtReturnYes(E1); RESULT.setLine(E1left); :}
		   |
		   (StmtReturnNo) RETURN SEMI {: RESULT=new StmtReturnNo(); :}
		   |
		   (StmtRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StmtRead(D1); RESULT.setLine(D1left); :}
		   |
		   (StmtPrintYes) PRINT LPAREN Expr:E1 COMMA NUM_CONST:N2 RPAREN SEMI {: RESULT=new StmtPrintYes(E1, N2); RESULT.setLine(E1left); :}
		   |
		   (StmtPrintNo) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StmtPrintNo(E1); RESULT.setLine(E1left); :}
		   |
		   (StmtForYesYesYes) ForSymbol:F1 LPAREN DesignatorStatement:D2 DesignatorStmtList:D3 SEMI CondFact:C4 SEMI DesignatorStatement:D5 DesignatorStmtList:D6 RPAREN Statement:S7 {: RESULT=new StmtForYesYesYes(F1, D2, D3, C4, D5, D6, S7); RESULT.setLine(F1left); :}
		   |
		   (StmtForYesYesNo) ForSymbol:F1 LPAREN DesignatorStatement:D2 DesignatorStmtList:D3 SEMI CondFact:C4 SEMI RPAREN Statement:S5 {: RESULT=new StmtForYesYesNo(F1, D2, D3, C4, S5); RESULT.setLine(F1left); :}
		   |
		   (StmtForYesNoYes) ForSymbol:F1 LPAREN SEMI CondFact:C2 SEMI DesignatorStatement:D3 DesignatorStmtList:D4 RPAREN Statement:S5 {: RESULT=new StmtForYesNoYes(F1, C2, D3, D4, S5); RESULT.setLine(F1left); :}
		   |
		   (StmtForYesNoNo) ForSymbol:F1 LPAREN SEMI CondFact:C2 SEMI RPAREN Statement:S3 {: RESULT=new StmtForYesNoNo(F1, C2, S3); RESULT.setLine(F1left); :}
		   |
		   (StmtForNoYesYes) ForSymbol:F1 LPAREN DesignatorStatement:D2 DesignatorStmtList:D3 SEMI SEMI DesignatorStatement:D4 DesignatorStmtList:D5 RPAREN Statement:S6 {: RESULT=new StmtForNoYesYes(F1, D2, D3, D4, D5, S6); RESULT.setLine(F1left); :}
		   |
		   (StmtForNoYesNo) ForSymbol:F1 LPAREN DesignatorStatement:D2 DesignatorStmtList:D3 SEMI SEMI RPAREN Statement:S4 {: RESULT=new StmtForNoYesNo(F1, D2, D3, S4); RESULT.setLine(F1left); :}
		   |
		   (StmtForNoNoYes) ForSymbol:F1 LPAREN SEMI SEMI DesignatorStatement:D2 DesignatorStmtList:D3 RPAREN Statement:S4 {: RESULT=new StmtForNoNoYes(F1, D2, D3, S4); RESULT.setLine(F1left); :}
		   |
		   (StmtForNoNoNo) ForSymbol:F1 LPAREN SEMI SEMI RPAREN Statement:S2 {: RESULT=new StmtForNoNoNo(F1, S2); RESULT.setLine(F1left); :}
		   |
		   (StmtBlock) LBRACE StatementList:S1 RBRACE {: RESULT=new StmtBlock(S1); RESULT.setLine(S1left); :};
		   
ForSymbol ::= (ForSymbolt) FOR {: RESULT=new ForSymbolt(); :};

ElseOpt ::= (ElseOptYes) ELSE Statement:S1 {: RESULT=new ElseOptYes(S1); RESULT.setLine(S1left); :}
		 |
		 (ElseOptNo) {: RESULT=new ElseOptNo(); :} /* epsilon */;
				   
DesignatorStmtList ::= (DesignatorStmtListYes) DesignatorStmtList:D1 COMMA DesignatorStatement:D2 {: RESULT=new DesignatorStmtListYes(D1, D2); RESULT.setLine(D1left); :}
					|
					(DesignatorStmtListNo) {: RESULT=new DesignatorStmtListNo(); :} /* epsilon */;

DesignatorStatement ::= (DesignatorStmtFirst) Designator:D1 OpChoice:O2 {: RESULT=new DesignatorStmtFirst(D1, O2); RESULT.setLine(D1left); :}
					 |
					 (DesignatorStmtSecond) LBRACKET DesignatorList:D1 MUL Designator:D2 RBRACKET ASSIGN Designator:D3 {: RESULT=new DesignatorStmtSecond(D1, D2, D3); RESULT.setLine(D1left); :}
					 |
					 (DesignatorStmtThirdYes) Designator:D1 ASSIGN LBRACKET FOR Expr:E2 IN Designator:D3 IF Condition:C4 RBRACKET {: RESULT=new DesignatorStmtThirdYes(D1, E2, D3, C4); RESULT.setLine(D1left); :}
					 |
					 (DesignatorStmtThirdNo) Designator:D1 ASSIGN LBRACKET FOR Expr:E2 IN Designator:D3 RBRACKET {: RESULT=new DesignatorStmtThirdNo(D1, E2, D3); RESULT.setLine(D1left); :};
					 
OpChoice ::= (OpChoiceExpr) Assignop:A1 Expr:E2 {: RESULT=new OpChoiceExpr(A1, E2); RESULT.setLine(A1left); :}
		  |
		  (OpChoiceActParsYes) TLParen:T1 ActPars:A2 TRParen:T3 {: RESULT=new OpChoiceActParsYes(T1, A2, T3); RESULT.setLine(T1left); :}
		  |
		  (OpChoiceActParsNo) LPAREN RPAREN {: RESULT=new OpChoiceActParsNo(); :}
		  |
		  (OpChoiceInc) INC {: RESULT=new OpChoiceInc(); :}
		  |
		  (OpChoiceDec) DEC {: RESULT=new OpChoiceDec(); :};

TLParen ::= (TLParent) LPAREN {: RESULT=new TLParent(); :};

TRParen ::= (TRParent) RPAREN {: RESULT=new TRParent(); :};

DesignatorList ::= (DesignatorListYesYes) DesignatorList:D1 Designator:D2 COMMA {: RESULT=new DesignatorListYesYes(D1, D2); RESULT.setLine(D1left); :}
				|
				(DesignatorListYesNo) DesignatorList:D1 COMMA {: RESULT=new DesignatorListYesNo(D1); RESULT.setLine(D1left); :}
				|
				(DesignatorListNo) {: RESULT=new DesignatorListNo(); :} /* epsilon */;

ActPars ::= (ActParst) ActParsTemp:A1 {: RESULT=new ActParst(A1); RESULT.setLine(A1left); :};
		 
ActParsTemp ::= (ActParsTempList) ActParsTemp:A1 COMMA Expr:E2 {: RESULT=new ActParsTempList(A1, E2); RESULT.setLine(A1left); :}
			 |
			 (ActParsTempSingle) Expr:E1 {: RESULT=new ActParsTempSingle(E1); RESULT.setLine(E1left); :};

Condition ::= (Conditiont) CondTerm:C1 CondTermList:C2 {: RESULT=new Conditiont(C1, C2); RESULT.setLine(C1left); :};

CondTermList ::= (CondTermListYes) CondTermList:C1 OR CondTerm:C2 {: RESULT=new CondTermListYes(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (CondTermListNo) {: RESULT=new CondTermListNo(); :} /* epsilon */;

CondTerm ::= (CondTermt) CondFact:C1 CondFactList:C2 {: RESULT=new CondTermt(C1, C2); RESULT.setLine(C1left); :};

CondFactList ::= (CondFactListYes) CondFactList:C1 AND CondFact:C2 {: RESULT=new CondFactListYes(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (CondFactListNo) {: RESULT=new CondFactListNo(); :} /* epsilon */;

CondFact ::= (CondFactYes) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactYes(E1, R2, E3); RESULT.setLine(E1left); :}
		  |
		  (CondFactNo) Expr:E1 {: RESULT=new CondFactNo(E1); RESULT.setLine(E1left); :};

Expr ::= (ExprYes) MINUS Term:T1 AddopTermList:A2 {: RESULT=new ExprYes(T1, A2); RESULT.setLine(T1left); :}
	  |
	  (ExprNo) Term:T1 AddopTermList:A2 {: RESULT=new ExprNo(T1, A2); RESULT.setLine(T1left); :};

AddopTermList ::= (AddopTermListYes) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermListYes(A1, A2, T3); RESULT.setLine(A1left); :}
			   |
			   (AddopTermListNo) {: RESULT=new AddopTermListNo(); :} /* epsilon */;

Term ::= (Termt) Factor:F1 MulopFactorList:M2 {: RESULT=new Termt(F1, M2); RESULT.setLine(F1left); :};

MulopFactorList ::= (MulopFactorListYes) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorListYes(M1, M2, F3); RESULT.setLine(M1left); :}
				 |
				 (MulopFactorListNo) {: RESULT=new MulopFactorListNo(); :} /* epsilon */;

Factor ::= (FactorDesignatorFirst) Designator:D1 TLParen:T2 ActPars:A3 TRParen:T4 {: RESULT=new FactorDesignatorFirst(D1, T2, A3, T4); RESULT.setLine(D1left); :}
		|
		(FactorDesignatorSecond) Designator:D1 LPAREN RPAREN {: RESULT=new FactorDesignatorSecond(D1); RESULT.setLine(D1left); :}
		|
		(FactorDesignatorThird) Designator:D1 {: RESULT=new FactorDesignatorThird(D1); RESULT.setLine(D1left); :}
		|
		(FactorNum) NUM_CONST:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
		|
		(FactorChar) CHAR_CONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		|
		(FactorBool) BOOL_CONST:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		|
		(FactorNew) NEW Type:T1 NewChoice:N2 {: RESULT=new FactorNew(T1, N2); RESULT.setLine(T1left); :}
		|
		(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
		|
		(FactorRange) RANGE LPAREN Expr:E1 RPAREN {: RESULT=new FactorRange(E1); RESULT.setLine(E1left); :};

NewChoice ::= (NewChoiceExpr) LBRACKET Expr:E1 RBRACKET {: RESULT=new NewChoiceExpr(E1); RESULT.setLine(E1left); :}
		   |
		   (NewChoiceActParsYes) LPAREN ActPars:A1 RPAREN {: RESULT=new NewChoiceActParsYes(A1); RESULT.setLine(A1left); :}
		   |
		   (NewChoiceActParsNo) LPAREN RPAREN {: RESULT=new NewChoiceActParsNo(); :};

Designator ::= (DesignatorYes) IDENT:nspName RESOLUTION IDENT:dsgName DesignatorParts:D1 {: RESULT=new DesignatorYes(nspName, dsgName, D1); RESULT.setLine(nspNameleft); :}
			|
			(DesignatorNo) IDENT:dsgName DesignatorParts:D1 {: RESULT=new DesignatorNo(dsgName, D1); RESULT.setLine(dsgNameleft); :};

DesignatorParts ::= (DesignatorPartsIdent) DesignatorParts:D1 DOT IDENT:dsgName {: RESULT=new DesignatorPartsIdent(D1, dsgName); RESULT.setLine(D1left); :}
				 |
				 (DesignatorPartsExpr) DesignatorParts:D1 TLBracket:T2 Expr:E3 TRBracket:T4 {: RESULT=new DesignatorPartsExpr(D1, T2, E3, T4); RESULT.setLine(D1left); :}
				 |
				 (DesignatorPartsNo) {: RESULT=new DesignatorPartsNo(); :} /* epsilon */;
				 
TLBracket ::= (TLBrackett) LBRACKET {: RESULT=new TLBrackett(); :};

TRBracket ::= (TRBrackett) RBRACKET {: RESULT=new TRBrackett(); :};

Label ::= (Labelt) IDENT:labName {: RESULT=new Labelt(labName); RESULT.setLine(labNameleft); :};

Assignop ::= (AssignopAssignt) ASSIGN {: RESULT=new AssignopAssignt(); :};

Relop ::= (RelopEqual) EQUAL {: RESULT=new RelopEqual(); :}
	   |
	   (RelopNotEqual) NOT_EQUAL {: RESULT=new RelopNotEqual(); :}
	   |
	   (RelopGrt) GRT {: RESULT=new RelopGrt(); :}
	   |
	   (RelopGrtEqual) GRT_EQUAL {: RESULT=new RelopGrtEqual(); :}
	   |
	   (RelopLess) LESS {: RESULT=new RelopLess(); :}
	   |
	   (RelopLessEqual) LESS_EQUAL {: RESULT=new RelopLessEqual(); :};

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
	   |
	   (AddopMinus) MINUS {: RESULT=new AddopMinus(); :};

Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
	   |
	   (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
	   |
	   (MulopMod) MOD {: RESULT=new MulopMod(); :};
